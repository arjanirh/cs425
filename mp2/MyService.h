/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MyService_H
#define MyService_H

#include <TProcessor.h>
#include "mp2_types.h"

namespace mp2 {

class MyServiceIf {
 public:
  virtual ~MyServiceIf() {}
  virtual void rpc_find_successor2(suc_data& _return, const int32_t key) = 0;
  virtual void rpc_give_local_successor(suc_data& _return) = 0;
};

class MyServiceIfFactory {
 public:
  typedef MyServiceIf Handler;

  virtual ~MyServiceIfFactory() {}

  virtual MyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MyServiceIf* /* handler */) = 0;
};

class MyServiceIfSingletonFactory : virtual public MyServiceIfFactory {
 public:
  MyServiceIfSingletonFactory(const boost::shared_ptr<MyServiceIf>& iface) : iface_(iface) {}
  virtual ~MyServiceIfSingletonFactory() {}

  virtual MyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MyServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MyServiceIf> iface_;
};

class MyServiceNull : virtual public MyServiceIf {
 public:
  virtual ~MyServiceNull() {}
  void rpc_find_successor2(suc_data& /* _return */, const int32_t /* key */) {
    return;
  }
  void rpc_give_local_successor(suc_data& /* _return */) {
    return;
  }
};

typedef struct _MyService_rpc_find_successor2_args__isset {
  _MyService_rpc_find_successor2_args__isset() : key(false) {}
  bool key;
} _MyService_rpc_find_successor2_args__isset;

class MyService_rpc_find_successor2_args {
 public:

  MyService_rpc_find_successor2_args() : key(0) {
  }

  virtual ~MyService_rpc_find_successor2_args() throw() {}

  int32_t key;

  _MyService_rpc_find_successor2_args__isset __isset;

  void __set_key(const int32_t val) {
    key = val;
  }

  bool operator == (const MyService_rpc_find_successor2_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const MyService_rpc_find_successor2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyService_rpc_find_successor2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MyService_rpc_find_successor2_pargs {
 public:


  virtual ~MyService_rpc_find_successor2_pargs() throw() {}

  const int32_t* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyService_rpc_find_successor2_result__isset {
  _MyService_rpc_find_successor2_result__isset() : success(false) {}
  bool success;
} _MyService_rpc_find_successor2_result__isset;

class MyService_rpc_find_successor2_result {
 public:

  MyService_rpc_find_successor2_result() {
  }

  virtual ~MyService_rpc_find_successor2_result() throw() {}

  suc_data success;

  _MyService_rpc_find_successor2_result__isset __isset;

  void __set_success(const suc_data& val) {
    success = val;
  }

  bool operator == (const MyService_rpc_find_successor2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MyService_rpc_find_successor2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyService_rpc_find_successor2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyService_rpc_find_successor2_presult__isset {
  _MyService_rpc_find_successor2_presult__isset() : success(false) {}
  bool success;
} _MyService_rpc_find_successor2_presult__isset;

class MyService_rpc_find_successor2_presult {
 public:


  virtual ~MyService_rpc_find_successor2_presult() throw() {}

  suc_data* success;

  _MyService_rpc_find_successor2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MyService_rpc_give_local_successor_args {
 public:

  MyService_rpc_give_local_successor_args() {
  }

  virtual ~MyService_rpc_give_local_successor_args() throw() {}


  bool operator == (const MyService_rpc_give_local_successor_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MyService_rpc_give_local_successor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyService_rpc_give_local_successor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MyService_rpc_give_local_successor_pargs {
 public:


  virtual ~MyService_rpc_give_local_successor_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyService_rpc_give_local_successor_result__isset {
  _MyService_rpc_give_local_successor_result__isset() : success(false) {}
  bool success;
} _MyService_rpc_give_local_successor_result__isset;

class MyService_rpc_give_local_successor_result {
 public:

  MyService_rpc_give_local_successor_result() {
  }

  virtual ~MyService_rpc_give_local_successor_result() throw() {}

  suc_data success;

  _MyService_rpc_give_local_successor_result__isset __isset;

  void __set_success(const suc_data& val) {
    success = val;
  }

  bool operator == (const MyService_rpc_give_local_successor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MyService_rpc_give_local_successor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyService_rpc_give_local_successor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MyService_rpc_give_local_successor_presult__isset {
  _MyService_rpc_give_local_successor_presult__isset() : success(false) {}
  bool success;
} _MyService_rpc_give_local_successor_presult__isset;

class MyService_rpc_give_local_successor_presult {
 public:


  virtual ~MyService_rpc_give_local_successor_presult() throw() {}

  suc_data* success;

  _MyService_rpc_give_local_successor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MyServiceClient : virtual public MyServiceIf {
 public:
  MyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void rpc_find_successor2(suc_data& _return, const int32_t key);
  void send_rpc_find_successor2(const int32_t key);
  void recv_rpc_find_successor2(suc_data& _return);
  void rpc_give_local_successor(suc_data& _return);
  void send_rpc_give_local_successor();
  void recv_rpc_give_local_successor(suc_data& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MyServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<MyServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (MyServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_rpc_find_successor2(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rpc_give_local_successor(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MyServiceProcessor(boost::shared_ptr<MyServiceIf> iface) :
    iface_(iface) {
    processMap_["rpc_find_successor2"] = &MyServiceProcessor::process_rpc_find_successor2;
    processMap_["rpc_give_local_successor"] = &MyServiceProcessor::process_rpc_give_local_successor;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~MyServiceProcessor() {}
};

class MyServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MyServiceProcessorFactory(const ::boost::shared_ptr< MyServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MyServiceIfFactory > handlerFactory_;
};

class MyServiceMultiface : virtual public MyServiceIf {
 public:
  MyServiceMultiface(std::vector<boost::shared_ptr<MyServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MyServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MyServiceIf> > ifaces_;
  MyServiceMultiface() {}
  void add(boost::shared_ptr<MyServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void rpc_find_successor2(suc_data& _return, const int32_t key) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->rpc_find_successor2(_return, key);
        return;
      } else {
        ifaces_[i]->rpc_find_successor2(_return, key);
      }
    }
  }

  void rpc_give_local_successor(suc_data& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->rpc_give_local_successor(_return);
        return;
      } else {
        ifaces_[i]->rpc_give_local_successor(_return);
      }
    }
  }

};

} // namespace

#endif

// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MyService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::mp2;

class MyServiceHandler : virtual public MyServiceIf {
 public:
  MyServiceHandler() {
    // Your initialization goes here
  }

  void rpc_find_successor2(suc_data& _return, const int32_t key) {
    // Your implementation goes here
    printf("rpc_find_successor2\n");

	//Check if key is between myid and my_suc
	if(key>id && key<= my_suc.id){
		_return = my_suc;
		return;
	}
	else{
	//ask closest predecessor - go through finger table and 
		//int closest_pre = ftable[ftable.size()-1].id;
		int pre_port;
		for(int i=ftable.size()-1; i>=0; i--){
			int val = id + (pow(2,i)) % (pow(2,m));
			if(ftable[i].id !=0 && key>= val){
				
				//Found predecessor, now ask it for its successor
			
				//Dont ask myself for successor again
				if(id==ftable[i].id){
					_return = my_suc;
					return;
				}

				boost::shared_ptr<TSocket> socket(new TSocket("localhost", ftable[i].port));
				boost::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
				boost::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
				
				MyServiceClient client(protocol);
				transport->open();
				suc_data result;
				client.rpc_find_successor(result, key);
				transport->close();
			
				_return = result;
				return;
			}
		}
		//if not found
		_return = my_suc;
		return;
	}

  }

  void rpc_give_local_successor(suc_data& _return) {
    // Your implementation goes here
    printf("rpc_give_local_successor\n");

	_return = my_suc;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<MyServiceHandler> handler(new MyServiceHandler());
  shared_ptr<TProcessor> processor(new MyServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

